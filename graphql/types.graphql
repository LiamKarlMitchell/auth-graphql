########################################################
# Types
extend type User {
    email: String!
    name: String
    roles: [Role]
}

"type Response User"
type ResponseUser {
    accessToken: String!
    user: User!
}

"type Response Auth"
type ResponseAuth {
    accessToken: String!
}

"Authenticate input"
input AuthenticateInput {
    email: String!
    password: String!
}

"Authenticate Model input"
input AuthModelInput {
    tableName: String! @rules(apply: ["string"])
    keyValue: String! @rules(apply: ["string"])
    secretValue: String! @rules(apply: ["string"])
}

"Register User input"
input RegisterUserInput {
    """
    'email' - required User property
    """
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    """
    'password' - required User property
    """
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    """
    password confirmation
    """
    password_confirmation: String!
    """
    'name' - default User property (not required if 'firstName' is present),
    you can send 'firstName' and 'lastName' instead,
    in this case it would be saved as 'name' ("firstName lastName").
    """
    name: String @rules(apply: ["required_without:input.firstName", "filled", "string"])
    """
    will be saved to 'name' (default User property),
    if 'name' and 'lastName' is empty,
    or with 'lastName' (see 'lastName' description).
    """
    firstName: String @rules(apply: ["required_without:input.name", "filled", "string"])
    """
    will be saved to 'name' (default User property),
    together with 'firstName', like "firstName lastName",
    if 'name' is empty.
    """
    lastName: String @rules(apply: ["filled", "string"])
}

"Role"
type Role {
    name: String!
}
